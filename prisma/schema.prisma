generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProgramStatus {
  DRAFT
  SUBMITTED
  APPROVED
  VERIFIED
  RECOMMENDED
  CONTRACTED
  MONITORING
  PAYMENT_RUNNING
  PAYMENT_FINAL
  CLOSED
  ARCHIVED
}

model ProgramType {
  id        String    @id @default(cuid())
  name      String    @unique
  code      String    @unique
  programs  Program[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([code])
}

model FundingSource {
  id        String    @id @default(cuid())
  name      String    @unique
  code      String    @unique
  programs  Program[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([code])
}

model FiscalYear {
  id        String    @id @default(cuid())
  year      String    @unique
  isActive  Boolean   @default(false)
  programs  Program[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([year])
}

model Ward {
  id       String    @id @default(cuid())
  code     String    @unique
  name     String
  users    User[]
  programs Program[]
  createdAt DateTime @default(now())

  @@index([code])
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  @@index([name])
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  hashedPassword String?
  ward           Ward?    @relation(fields: [wardId], references: [id])
  wardId         String?
  roles          Role[]
  programsCreated Program[] @relation("ProgramCreatedBy")
  documentsUploaded ProgramDocument[] @relation("DocumentUploadedBy")
  paymentsRequested ProgramPayment[] @relation("PaymentRequestedBy")
  paymentsApproved ProgramPayment[] @relation("PaymentApprovedBy")
  approvalsGiven ProgramApproval[] @relation("ApprovalGivenBy")
  activityLogs   ActivityLog[]
  notifications  Notification[]
  reportsGenerated Report[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  @@index([email])
  @@index([wardId])
}

model Program {
  id            String         @id @default(cuid())
  code          String         @unique
  name          String
  fiscalYear    FiscalYear     @relation(fields: [fiscalYearId], references: [id])
  fiscalYearId  String
  sector        String?
  budget        Decimal?       @db.Decimal(14,2)
  fundingSource FundingSource  @relation(fields: [fundingSourceId], references: [id])
  fundingSourceId String
  programType   ProgramType    @relation(fields: [programTypeId], references: [id])
  programTypeId String
  description   String?
  startDate     DateTime?
  endDate       DateTime?
  status        ProgramStatus  @default(DRAFT)
  ward          Ward           @relation(fields: [wardId], references: [id])
  wardId        String
  createdBy     User?          @relation("ProgramCreatedBy", fields: [createdById], references: [id])
  createdById   String?
  tags          String[]       @default([])
  responsibleOfficer String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  documents    ProgramDocument[]
  approvals    ProgramApproval[]
  payments     ProgramPayment[]
  monitoring   ProgramMonitoring[]

  @@index([code])
  @@index([wardId])
  @@index([status])
  @@index([fiscalYearId])
  @@index([fundingSourceId])
  @@index([programTypeId])
  @@index([createdById])
}

model ProgramDocument {
  id        String   @id @default(cuid())
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  fileName  String
  filePath  String
  fileType  String
  fileSize  Int
  category  String  // e.g., "red_book", "executive_approval", "estimation", "monitoring"
  uploadedBy User   @relation("DocumentUploadedBy", fields: [uploadedById], references: [id])
  uploadedById String
  createdAt DateTime @default(now())

  @@index([programId])
  @@index([category])
  @@index([uploadedById])
}

model ProgramApproval {
  id          String   @id @default(cuid())
  program     Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId   String
  step        String   // e.g., "ward_secretary", "planning_officer", "cao"
  status      String   // "pending", "approved", "rejected"
  remarks     String?
  approvedBy  User?    @relation("ApprovalGivenBy", fields: [approvedById], references: [id])
  approvedById String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())

  @@index([programId])
  @@index([step])
  @@index([status])
  @@index([approvedById])
}

model ProgramPayment {
  id          String   @id @default(cuid())
  program     Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId   String
  amount      Decimal  @db.Decimal(14,2)
  purpose     String
  status      String   // "pending", "approved", "rejected"
  requestedBy User     @relation("PaymentRequestedBy", fields: [requestedById], references: [id])
  requestedById String
  approvedBy  User?    @relation("PaymentApprovedBy", fields: [approvedById], references: [id])
  approvedById String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())

  @@index([programId])
  @@index([status])
  @@index([requestedById])
  @@index([approvedById])
}

model ProgramMonitoring {
  id          String   @id @default(cuid())
  program     Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId   String
  type        String   // e.g., "site_inspection", "progress_review", "quality_check"
  inspector   String
  status      String   // "scheduled", "completed", "cancelled"
  comments    String?
  photos      String[] @default([])
  reportDate  DateTime
  createdAt   DateTime @default(now())

  @@index([programId])
  @@index([type])
  @@index([status])
  @@index([reportDate])
}

//// NextAuth models ////
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Activity Log for tracking system activities
model ActivityLog {
  id          String   @id @default(cuid())
  action      String   // e.g., "program_created", "document_uploaded", "approval_given"
  description String   // Human readable description
  entityType  String   // e.g., "program", "document", "approval"
  entityId    String?  // ID of the related entity
  userId      String?  // User who performed the action
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  metadata    Json?    // Additional data about the action
  createdAt   DateTime @default(now())

  @@index([action])
  @@index([entityType])
  @@index([userId])
  @@index([createdAt])
}

// System notifications and reminders
model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        String   // e.g., "deadline", "approval", "payment", "info"
  priority    String   // "low", "medium", "high"
  isRead      Boolean  @default(false)
  userId      String?  // If null, it's a system-wide notification
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  entityType  String?  // Related entity type
  entityId    String?  // Related entity ID
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([isRead])
  @@index([createdAt])
}

// Reports generation tracking
model Report {
  id          String   @id @default(cuid())
  name        String
  type        String   // "ward", "status", "budget", "timeline", "custom"
  parameters  Json     // Report parameters/filters
  filePath    String?  // Path to generated file
  fileSize    Int?     // File size in bytes
  status      String   // "generating", "completed", "failed"
  generatedBy User     @relation(fields: [generatedById], references: [id])
  generatedById String
  createdAt   DateTime @default(now())
  completedAt DateTime?

  @@index([type])
  @@index([status])
  @@index([generatedById])
  @@index([createdAt])
}
